// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id                 String    @id @default(cuid())
  username           String    @unique
  name               String?
  email              String?   @unique
  passwordHash       String
  publicKey          String
  privateKeyEncrypted String
  avatar             String?
  bio                String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  lastLoginAt        DateTime?
  isAnonymous        Boolean   @default(false)
  autoDeleteAt       DateTime?
  twoFactorEnabled   Boolean   @default(false)
  twoFactorSecret    String?
  
  // 关系
  chatUsers          ChatUser[]
  messages           Message[]
  sentMessages       Message[]  @relation("SentMessages")
  readReceipts       ReadReceipt[] // 新增：用户的已读记录
}

// 聊天模型
model Chat {
  id                String    @id @default(cuid())
  name              String?
  isGroup           Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  superPrivacyMode  Boolean   @default(false)
  
  // 关系
  users             ChatUser[]
  messages          Message[]
  readReceipts      ReadReceipt[]  // 新增：聊天中的已读回执关系
}

// 聊天用户关系
model ChatUser {
  id               String    @id @default(cuid())
  chatId           String
  userId           String
  joinedAt         DateTime  @default(now())
  isAdmin          Boolean   @default(false)
  personalChatLink String?   @unique
  lastReadMessageId String?  // 新增：该用户在此聊天中最后已读的消息ID
  
  // 关系
  chat             Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastReadMessage  Message?  @relation("LastReadMessage", fields: [lastReadMessageId], references: [id], onDelete: SetNull)
  
  @@unique([chatId, userId])
}

// 消息模型
model Message {
  id              String    @id @default(cuid())
  chatId          String
  senderId        String
  content         String
  encryptedKey    String?
  mediaUrl        String?
  mediaType       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isDeleted       Boolean   @default(false)
  autoDeleteAt    DateTime?
  replyToId       String?
  senderVisible   Boolean   @default(false)  // 标记该消息发送方可见
  
  // 关系
  chat            Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender          User      @relation(fields: [senderId], references: [id], map: "Message_sender_fkey")
  senderRelation  User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade, map: "Message_senderRelation_fkey")
  replyTo         Message?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: SetNull)
  replies         Message[] @relation("ReplyTo")
  deliveredFrom   Message?  @relation("ForwardFrom", fields: [deliveredFromId], references: [id], onDelete: SetNull)
  deliveredTo     Message[] @relation("ForwardFrom")
  deliveredFromId String?
  
  // 已读跟踪相关
  readBy          ReadReceipt[]     // 新增：记录哪些用户已读此消息
  lastReadInChats ChatUser[]        @relation("LastReadMessage") // 新增：作为最后已读消息的关系
}

// 新增：已读回执模型
model ReadReceipt {
  id        String   @id @default(cuid())
  userId    String
  messageId String
  chatId    String
  readAt    DateTime @default(now())
  
  // 关系
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  @@unique([userId, messageId])
  @@index([chatId, userId])
}
